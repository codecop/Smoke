#!/usr/bin/env ruby

require 'open3'
require 'optparse'
require 'shellwords'

GREEN = "\e[32m".freeze
RED = "\e[31m".freeze
RESET = "\e[0m".freeze

GLOB_PATTERNS = [
  ->(root) { "#{root}/*.*" },
  ->(root) { "#{root}.*" },
].freeze

FILE_TYPES = {
  command: { extension: '.command' },
  args: { extension: '.args' },
  input: { extension: '.in' },
  output: { extension: /^\.out/ },
  error: { extension: /^\.err/ },
  status: { extension: '.status' },
}.freeze

module Enumerable
  unless method_defined?(:to_h)
    def to_h
      hash = {}
      each do |key, value|
        hash[key] = value
      end
      hash
    end
  end
end

class SmokeError < StandardError
end

class NoCommandFileError < SmokeError
  def initialize
    super "There is no command file."
  end
end

class NoInputFilesError < SmokeError
  def initialize
    super "There are no args or STDIN files."
  end
end

class NoOutputFilesError < SmokeError
  def initialize
    super "There are no STDOUT or STDERR files."
  end
end

class NoSuchApplicationError < SmokeError
  def initialize(name)
    super "The application #{name.inspect} does not exist."
  end
end

class NonExecutableApplicationError < SmokeError
  def initialize(name)
    super "The application #{name.inspect} is not executable."
  end
end

def validate_application(test_name, command)
  raise NoCommandFileError if command.nil?

  application = command[0]
  valid_extensions = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
  return if ENV['PATH'].split(File::PATH_SEPARATOR).any? { |path|
    valid_extensions.find { |extension|
      name = File.join(path, "#{application}#{extension}")
      File.executable?(name) && !File.directory?(name)
    }
  }

  raise NonExecutableApplicationError, application \
    if File.exist?(application) && (!File.executable?(application) || File.directory?(application))
  raise NoSuchApplicationError, application \
    unless File.exist?(application)
end

def run_application(command, args, input)
  output, error, status = Open3.capture3(*(command + args), stdin_data: input)
  output.strip!
  error.strip!
  [output, error, status.exitstatus]
end

def read_tests(roots, command_override)
  roots
    .collect_concat { |root|
      root_command_file = ["#{root}/command", "#{File.dirname(root)}/command"].find { |c| File.exist?(c) }
      root_command = root_command_file ? IO.read(root_command_file).strip : nil
      all_files = GLOB_PATTERNS.collect_concat { |pattern| Dir.glob(pattern.call(root)) }.sort
      harvest(command_override, root_command, all_files)
    }
end

def harvest(command_override, root_command, all_files)
  all_files
    .collect { |file| [File.basename(file, '.*'), look_up_extension(File.extname(file)), file] }
    .reject { |_, type, _| type.nil? }
    .group_by { |name, _, _| name }
    .collect { |name, files|
      categorized_files = files
        .collect { |_, type, file| [type, IO.read(file).strip] }
        .group_by { |type, _| type }
        .collect { |type, types_and_files| [type, types_and_files.collect { |_, file| file }] }
        .to_h
      [name, categorized_files]
    }
    .sort_by { |name, _| name }
    .collect { |name, files|
      command =
        if command_override
          command_override
        elsif files[:command]
          files[:command][0].lines.collect(&:strip)
        elsif root_command
          root_command.lines.collect(&:strip)
        end
      args = files[:args] && files[:args][0].lines.collect(&:strip)
      input = files[:input] && files[:input][0]
      expected_output = files[:output]
      expected_error = files[:error]
      expected_status = (files[:status] || ['0'])[0].to_i
      [command, name, args, input, expected_output, expected_error, expected_status]
    }
end

def run_tests(tests)
  tests.each do |command, name, args, input, expected_output, expected_error, expected_status|
    puts name

    begin
      validate_application(name, command)
      raise NoInputFilesError if args.nil? && input.nil?
      raise NoOutputFilesError if expected_output.nil? && expected_error.nil?
    rescue SmokeError => e
      next failed(e.message)
    end

    args ||= []
    input ||= ''
    expected_output ||= ['']
    expected_error ||= ['']
    output, error, status = run_application command, args, input
    unless status == expected_status && expected_output.include?(output) && expected_error.include?(error)
      info = []
      info << ['args', highlight(args.join("\n"))] unless args.empty?
      info << ['input', highlight(input)] unless input.empty?
      info += add_unless(status == expected_status, status, [highlight(expected_status.to_s)], 'status')
      info += add_unless(expected_output.include?(output), output, highlighted_array(expected_output), 'output')
      info += add_unless(expected_error.include?(error), error, highlighted_array(expected_error), 'error')

      next failed(*(info.collect { |key, value| Kernel.format('%-17s %s', (key + ':'), value) }))
    end

    succeeded 'succeeded'
  end
end

def add_unless(condition, actual, expected, name)
  return [] if condition

  actual_output = ["actual #{name}", highlight(actual.to_s)]
  expected_prefix = "expected #{name}"
  subsequent_prefixes = (1...expected.length).collect { Kernel.format("%#{expected_prefix.length}s", 'or') }
  expected_prefixes = [expected_prefix] + subsequent_prefixes
  expected_output = expected_prefixes.zip(expected)
  [actual_output] + expected_output
end

def pluralize(count, singular, plural)
  count == 1 ? singular : plural
end

def print_summary
  puts
  count = @successes + @failures
  test_summary = "#{count} #{pluralize(count, 'test', 'tests')}"
  failure_summary = "#{@failures} #{pluralize(@failures, 'failure', 'failures')}"
  if @failures.zero?
    puts green "#{test_summary}, #{failure_summary}"
  else
    puts red "#{test_summary}, #{failure_summary}"
  end
end

def green(string)
  if @options[:color]
    "#{GREEN}#{string}#{RESET}"
  else
    string
  end
end

def red(string)
  if @options[:color]
    "#{RED}#{string}#{RESET}"
  else
    string
  end
end

@successes = 0
def succeeded(*messages)
  puts green messages.collect { |message| '  ' + message }.join "\n"
  @successes += 1
end

@failures = 0
def failed(*messages)
  puts red messages.collect { |message| '  ' + message }.join "\n"
  @failures += 1
end

def look_up_extension(extension)
  type, = FILE_TYPES.find { |_, configuration|
    case configuration[:extension]
    when String
      extension == configuration[:extension]
    when Regexp
      extension =~ configuration[:extension]
    end
  }
  type
end

def highlighted_array(array)
  array.collect { |value| highlight(value) }
end

def highlight(text)
  highlighted = (!@options[:color] && text.include?("\e")) ? RESET + text + RED : text
  highlighted.gsub("\n", "\n" + (' ' * 20))
end

def parse_options
  options = {
    color: $stdout.isatty,
  }

  immediate_exit_code = 0

  parser = OptionParser.new { |opts|
    opts.banner = 'Usage: smoke [options] TEST-DIRECTORY'

    opts.on '--command COMMAND', 'Specify or override the command to run' do |command|
      options[:command] = Shellwords.shellwords(command)
    end

    opts.on '-c', '--[no-]color', 'Color output' do |color|
      options[:color] = color
    end

    opts.on '-h', '--help', 'Help me' do
      puts opts
      exit immediate_exit_code
    end
  }

  parser.parse!

  if ARGV.empty?
    immediate_exit_code = 2
    parser.parse!(['--help'])
  end
  [options, ARGV]
end

begin
  @options, @args = parse_options
  run_tests(read_tests(@args, @options[:command]))
  print_summary
  exit 1 if @failures > 0
rescue SmokeError => e
  $stderr.puts e.message
  exit 1
end
